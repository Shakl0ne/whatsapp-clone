{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\93480\\\\WebstormProjects\\\\whatsapp_clone\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from \"./SocketProvider\";\nimport arrayEquality from \"../utils/ArrayEquality\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationsProvider(_ref) {\n  _s2();\n  let {\n    id,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      if (!prevConversations) {\n        return [{\n          recipients,\n          messages: []\n        }];\n      }\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations === null || prevConversations === void 0 ? void 0 : prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: conversation.messages ? [...conversation.messages, newMessage] : [newMessage]\n          };\n        }\n        return conversation;\n      });\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n  const formattedConversations = conversations === null || conversations === void 0 ? void 0 : conversations.map((conversation, index) => {\n    var _conversation$recipie, _conversation$message;\n    const recipients = (_conversation$recipie = conversation.recipients) === null || _conversation$recipie === void 0 ? void 0 : _conversation$recipie.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = (_conversation$message = conversation.messages) === null || _conversation$message === void 0 ? void 0 : _conversation$message.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return {\n        ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return {\n      ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations ? formattedConversations[selectedConversationIndex] : null,\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 7\n  }, this);\n}\n_s2(ConversationsProvider, \"CmF54rin1qzXcyIZFZ+UuxenltQ=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n_c = ConversationsProvider;\nvar _c;\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","arrayEquality","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex"],"sources":["C:/Users/93480/WebstormProjects/whatsapp_clone/client/src/contexts/ConversationsProvider.js"],"sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from \"./SocketProvider\";\nimport arrayEquality from \"../utils/ArrayEquality\";\n\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket  = useSocket()\n\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      if (!prevConversations) {\n        return [{ recipients, messages: [] }]\n      }\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations?.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: conversation.messages? [...conversation.messages, newMessage] : [newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n  useEffect(() => {\n    if (socket == null) return\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation]);\n\n\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  const formattedConversations = conversations?.map((conversation, index) => {\n    const recipients = conversation.recipients?.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages?.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n\n    const selected = index === selectedConversationIndex\n\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations? formattedConversations[selectedConversationIndex] : null,\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n      <ConversationsContext.Provider value={value}>\n        {children}\n      </ConversationsContext.Provider>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}