{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\93480\\\\WebstormProjects\\\\whatsapp_clone\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationsProvider(_ref) {\n  _s2();\n  let {\n    id,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage(\"conversations\", []);\n  const {\n    contacts\n  } = useContacts();\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n  function addMessageToConversation(_ref2) {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations === null || prevConversations === void 0 ? void 0 : prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n  const formattedConversations = conversations === null || conversations === void 0 ? void 0 : conversations.map((conversation, index) => {\n    var _conversation$recipie, _conversation$message;\n    const recipients = (_conversation$recipie = conversation.recipients) === null || _conversation$recipie === void 0 ? void 0 : _conversation$recipie.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = (_conversation$message = conversation.messages) === null || _conversation$message === void 0 ? void 0 : _conversation$message.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return {\n        ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return {\n      ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n    sendMessage\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s2(ConversationsProvider, \"LH8M3IpdqifhWTezXH3IG1Gu5e0=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n_c = ConversationsProvider;\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","contacts","selectedConversationIndex","setSelectedConversationIndex","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"sources":["C:/Users/93480/WebstormProjects/whatsapp_clone/client/src/contexts/ConversationsProvider.js"],"sourcesContent":["import React, {useContext, useState} from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage(\"conversations\", []);\n  const { contacts } = useContacts()\n  const [ selectedConversationIndex, setSelectedConversationIndex ] = useState(0)\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  function addMessageToConversation( {recipients, text, sender} ) {\n      setConversations(prevConversations => {\n        let madeChange = false\n        const newMessage = { sender, text }\n        const newConversations = prevConversations?.map(\n            conversation => {\n              if (arrayEquality(conversation.recipients, recipients)) {\n                madeChange = true\n                return { ...conversation, messages: [...conversation.messages, newMessage]}\n              }\n              return conversation\n            }\n        )\n        if (madeChange) {\n          return newConversations\n        } else {\n          return [...prevConversations, { recipients, messages: [newMessage] }]\n        }\n      })\n  }\n  function sendMessage(recipients, text) {\n    addMessageToConversation( {recipients, text, sender:id})\n  }\n\n  const formattedConversations = conversations?.map((conversation, index) => {\n    const recipients = conversation.recipients?.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages?.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return {...message, senderName:name, fromMe}\n    })\n\n    const selected = index === selectedConversationIndex\n    return {...conversation, messages,recipients, selected}\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n    sendMessage\n  }\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) {\n    return false\n  }\n  a.sort()\n  b.sort()\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}